{"version":3,"sources":["components/Wheel.js","components/Meter.js","App.js","serviceWorker.js","index.js"],"names":["Wheel","props","useStore","data","setData","speed","setSpeed","newData","thisSpeed","useEffect","spin","document","getElementById","prepend","lastElementChild","getElementsByClassName","forEach","e","style","transitionDuration","Math","ceil","unshift","pop","setTimeout","id","map","className","key","backgroundColor","color","text","Meter","useState","setMeterspeeds","meterspeed","useRef","slowReset","current","setFromEvent","floor","deltaY","interval","setInterval","window","addEventListener","clearInterval","removeEventListener","onClick","abs","random","border","width","height","background","display","justifyContent","paddingLeft","marginLeft","paddingRight","marginRight","createStore","wheeldata","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dc0edd3f.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { useStore } from \"react-hookstore\";\r\n\r\nfunction Wheel(props) {\r\n  const [data, setData] = useStore(\"dataStore\");\r\n  const [speed, setSpeed] = useStore(\"speedStore\");\r\n  let newData = data;\r\n  let thisSpeed = speed;\r\n  let spin = () => {\r\n    if (thisSpeed > 0) {\r\n      document\r\n        .getElementById(\"wheel\")\r\n        .prepend(document.getElementById(\"wheel\").lastElementChild);\r\n      [...document.getElementsByClassName(\"whoption\")].forEach(e => {\r\n        e.style.transitionDuration = thisSpeed + \"ms\";\r\n      });\r\n      thisSpeed = Math.ceil(thisSpeed + thisSpeed / 10);\r\n      newData.unshift(newData.pop());\r\n      if (thisSpeed < 800) {\r\n        setTimeout(spin, thisSpeed);\r\n      } else {\r\n        setTimeout(() => {\r\n          setData(newData);\r\n          setSpeed(0);\r\n        }, thisSpeed);\r\n      }\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    spin();\r\n  });\r\n  return (\r\n    <wheel id=\"wheel\" style={{ transitionDuration: `${thisSpeed}ms` }}>\r\n      {newData.map(e => {\r\n        return (\r\n          <whoption\r\n            className=\"whoption\"\r\n            key={e.id}\r\n            style={{\r\n              backgroundColor: e.color,\r\n              transitionDuration: `${thisSpeed}ms`\r\n            }}\r\n          >\r\n            <p>{e.text}</p>\r\n          </whoption>\r\n        );\r\n      })}\r\n    </wheel>\r\n  );\r\n}\r\n\r\nexport { Wheel };\r\n","import React from \"react\";\r\nimport { useState, useEffect, useRef } from \"react\";\r\nimport { useStore } from \"react-hookstore\";\r\n\r\nfunction Meter() {\r\n  const [speed, setSpeed] = useStore(\"speedStore\");\r\n  const [_, setMeterspeeds] = useState(0);\r\n  let meterspeed = useRef(0);\r\n\r\n  const reset = () => {\r\n    if (meterspeed.current !== 0) {\r\n      setSpeed(\r\n        1000 - Math.abs(meterspeed.current) * 10 + Math.floor(Math.random() * 4)\r\n      );\r\n      meterspeed.current = 0;\r\n      setMeterspeeds(0);\r\n    }\r\n  };\r\n  const slowReset = () => {\r\n    if (meterspeed.current === 0) {\r\n    } else if (meterspeed.current > 0) {\r\n      meterspeed.current--;\r\n      setMeterspeeds((speed) => speed - 1);\r\n    } else if (meterspeed.current < 0) {\r\n      meterspeed.current++;\r\n      setMeterspeeds((speed) => speed + 1);\r\n    }\r\n    if (meterspeed.current <= 1 && meterspeed.current >= -1) {\r\n      meterspeed.current = 0;\r\n      setMeterspeeds(0);\r\n    }\r\n  };\r\n  const setFromEvent = (e) => {\r\n    if (Math.floor(meterspeed.current + e.deltaY / 100) < -100) {\r\n      meterspeed.current = -100;\r\n      setMeterspeeds(meterspeed.current);\r\n    } else if (Math.floor(meterspeed.current + e.deltaY / 100) > 100) {\r\n      meterspeed.current = 100;\r\n      setMeterspeeds(meterspeed.current);\r\n    } else {\r\n      meterspeed.current = Math.floor(meterspeed.current + e.deltaY / 100);\r\n      setMeterspeeds(meterspeed.current);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    const interval = setInterval(slowReset, 100);\r\n    window.addEventListener(\"wheel\", setFromEvent);\r\n    return () => {\r\n      clearInterval(interval);\r\n      window.removeEventListener(\"wheel\", setFromEvent);\r\n    };\r\n  }, [speed]);\r\n\r\n  return (\r\n    <div id=\"meterBox\">\r\n      <button onClick={reset}>Spin!</button>\r\n      <div\r\n        style={{\r\n          border: \"1px solid black\",\r\n          width: \"200px\",\r\n          height: \"20px\",\r\n          background: \"white\",\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n        }}\r\n      >\r\n        <span\r\n          style={{\r\n            background: \"red\",\r\n            paddingLeft:\r\n              meterspeed.current > 0 ? meterspeed.current + \"px\" : \"0px\",\r\n            marginLeft:\r\n              meterspeed.current > 0 ? meterspeed.current + \"px\" : \"0px\",\r\n            paddingRight:\r\n              meterspeed.current < 0 ? -meterspeed.current + \"px\" : \"0px\",\r\n            marginRight:\r\n              meterspeed.current < 0 ? -meterspeed.current + \"px\" : \"0px\",\r\n            height: \"20px\",\r\n            display: \"block\",\r\n          }}\r\n        ></span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport { Meter };\r\n","import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { createStore, useStore } from \"react-hookstore\";\r\n\r\nimport { Wheel } from \"./components/Wheel\";\r\nimport { Meter } from \"./components/Meter\";\r\nimport \"./sass/App.scss\";\r\nimport wheeldata from \"./data/wheel.json\";\r\n\r\ncreateStore(\"speedStore\", 0);\r\ncreateStore(\"dataStore\", wheeldata);\r\n\r\nfunction App() {\r\n  const [speed] = useStore(\"speedStore\");\r\n  const [data] = useStore(\"dataStore\");\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Meter />\r\n      <Wheel />\r\n      <div id=\"winBox\">{speed === 0 ? `Winner: ${data[3].color}!` : \"\"}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}